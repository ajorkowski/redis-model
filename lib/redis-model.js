// Generated by CoffeeScript 1.3.3
(function() {
  var BaseModel, RedisModel,
    __slice = [].slice;

  module.exports = RedisModel = (function() {

    function RedisModel(_client, namespace, _seperator) {
      var _ref;
      this._client = _client;
      this.namespace = namespace;
      this._seperator = _seperator;
      if ((_ref = this._seperator) == null) {
        this._seperator = ':';
      }
      this._idCount = this.namespace + this._seperator + 'CurrentId';
      this._fields = [];
    }

    RedisModel.prototype.addFields = function() {
      var name, names, _i, _len;
      names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        if (this._fields.indexOf(name) > -1) {
          throw new Error('Field is already defined');
        }
        if (name === 'key') {
          throw new Error("The 'key' field is reserved");
        }
        if (name === 'namespace') {
          throw new Error("The 'namespace' field is reserved");
        }
        this._fields.push(name);
      }
      return this;
    };

    RedisModel.prototype.sort = function(externalKey, options, cb) {
      var field, sorting, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
        _this = this;
      if (!(options != null) || typeof options === 'function') {
        cb = options;
        options = {};
      }
      if ((_ref = options.getKey) == null) {
        options.getKey = true;
      }
      if ((_ref1 = options.asc) == null) {
        options.asc = true;
      }
      if ((_ref2 = options.alpha) == null) {
        options.alpha = false;
      }
      if ((_ref3 = options.skip) == null) {
        options.skip = 0;
      }
      if ((_ref4 = options.take) == null) {
        options.take = null;
      }
      if ((_ref5 = options.byField) == null) {
        options.byField = null;
      }
      if ((_ref6 = options.by) == null) {
        options.by = null;
      }
      if ((options.byField != null) && (options.by != null)) {
        return cb('Cannot sort by a field and by some other method at the same time');
      }
      sorting = [externalKey];
      if (options.byField != null) {
        sorting.push('BY');
        sorting.push(this.namespace + this._seperator + this._seperator + '*->' + options.byField);
      }
      if (options.by != null) {
        sorting.push('BY');
        sorting.push(options.by);
      }
      if (options.take != null) {
        sorting.push('LIMIT');
        sorting.push(options.skip);
        sorting.push(options.take);
      }
      if (options.alpha) {
        sorting.push('ALPHA');
      }
      if (!options.asc) {
        sorting.push('DESC');
      }
      if (options.getKey) {
        sorting.push('GET');
        sorting.push('#');
      }
      _ref7 = this._fields;
      for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
        field = _ref7[_i];
        sorting.push('GET');
        sorting.push(this.namespace + this._seperator + this._seperator + '*->' + field);
      }
      return this._client.sort(sorting, function(err, res) {
        var count, fieldNum, item, items, noFields, _j, _len1;
        if (err != null) {
          return cb(err);
        }
        items = [];
        item = {};
        noFields = _this._fields.length;
        if (options.getKey) {
          noFields++;
        }
        count = 0;
        for (_j = 0, _len1 = res.length; _j < _len1; _j++) {
          field = res[_j];
          fieldNum = count % noFields;
          if (options.getKey) {
            if (fieldNum === 0) {
              item.key = field;
            } else {
              item[_this._fields[fieldNum - 1]] = field;
            }
          } else {
            item[_this._fields[fieldNum]] = field;
          }
          if (fieldNum === noFields - 1) {
            items.push(item);
            item = {};
          }
          count++;
        }
        return cb(null, items);
      });
    };

    RedisModel.prototype.withKey = function(key, cb) {
      var err, model;
      if (!(this.namespace != null)) {
        err = 'The namespace of the model is not defined';
      } else {
        model = new BaseModel(this._fields, this._client, this.namespace, this._seperator, key);
      }
      if (cb != null) {
        return cb(err, model);
      }
    };

    RedisModel.prototype.newItem = function(cb) {
      var _this = this;
      if (!(this.namespace != null)) {
        if (cb != null) {
          cb('The namespace of the model is not defined');
        }
        return;
      }
      return this._client.multi().incr(this._idCount).get(this._idCount).exec(function(err, results) {
        var id, model;
        if (!(err != null)) {
          id = results[1];
          model = new BaseModel(_this._fields, _this._client, _this.namespace, _this._seperator, id);
        }
        if (cb != null) {
          return cb(err, model);
        }
      });
    };

    RedisModel.prototype.clearNamespace = function(cb) {
      var _this = this;
      return this._client.keys(this.namespace + '*', function(e, keys) {
        if (e != null) {
          return cb(e);
        }
        if (keys.length === 0) {
          return cb(null);
        }
        return _this._client.del(keys, cb);
      });
    };

    return RedisModel;

  })();

  BaseModel = (function() {
    var getField, setAllInternal, setField, setFunction;

    function BaseModel(_fields, _client, namespace, _seperator, key) {
      var field, _i, _len, _ref;
      this._fields = _fields;
      this._client = _client;
      this.namespace = namespace;
      this._seperator = _seperator;
      this.key = key;
      this._isLocked = false;
      this._innerObj = {};
      this._key = this.namespace + this._seperator + this._seperator + this.key;
      _ref = this._fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        this[field] = setFunction(this, field);
      }
    }

    BaseModel.prototype.lock = function() {
      return this._isLocked = true;
    };

    BaseModel.prototype.unlock = function(cb) {
      if (this._isLocked) {
        return this._client.hmset(this._key, this._innerObj, function(err, res) {
          if (!(err != null)) {
            this._innerObj = {};
            this._isLocked = false;
          }
          if (cb != null) {
            return cb(err, res);
          }
        });
      }
    };

    BaseModel.prototype.getAll = function(cb) {
      var self;
      self = this;
      return this._client.hgetall(this._key, function(err, res) {
        var result;
        if (!(err != null)) {
          result = self.extendObjs(self._innerObj, res);
          result.key = self.key;
        }
        if (cb != null) {
          return cb(err, result);
        }
      });
    };

    BaseModel.prototype.setAll = function(obj, cb) {
      var field, multi, _i, _len, _ref;
      if (this._isLocked) {
        _ref = this._fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          this._innerObj[field] = obj[field];
        }
        if (cb != null) {
          return cb();
        }
      } else {
        multi = this._client.multi();
        setAllInternal(this, obj, multi);
        return multi.exec(function(err) {
          if (cb != null) {
            return cb(err);
          }
        });
      }
    };

    BaseModel.prototype.multi = function() {
      var multi, self;
      self = this;
      multi = this._client.multi();
      multi.setAll = function(obj) {
        setAllInternal(self, obj, multi);
        return multi;
      };
      multi.setField = function(field, value) {
        if (value != null) {
          multi.hset([self._key, field, value]);
        } else {
          multi.hdel([self._key, field]);
        }
        return multi;
      };
      return multi;
    };

    setAllInternal = function(self, obj, multi) {
      var field, _i, _len, _ref, _results;
      _ref = self._fields;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (obj[field] != null) {
          _results.push(multi.hset(self._key, field, obj[field]));
        } else {
          _results.push(multi.hdel(self._key, field));
        }
      }
      return _results;
    };

    getField = function(self, field, cb) {
      var _ref;
      if (self._key != null) {
        if (self._innerObj[field] != null) {
          if (cb != null) {
            return cb(null, self._innerObj[field]);
          }
        } else {
          return self._client.hget([self._key, field], function(err, res) {
            if (cb != null) {
              return cb(err, res);
            }
          });
        }
      } else {
        if (cb != null) {
          return cb(null, (_ref = self._innerObj[field]) != null ? _ref : null);
        }
      }
    };

    setField = function(self, field, value, cb) {
      value = value != null ? value : null;
      if (self._isLocked) {
        self._innerObj[field] = value;
        if (cb != null) {
          return cb();
        }
      } else {
        if (value != null) {
          return self._client.hset([self._key, field, value], function(err, res) {
            if (cb != null) {
              return cb(err, res);
            }
          });
        } else {
          return self._client.hdel([self._key, field], function(err, res) {
            if (cb != null) {
              return cb(err, res);
            }
          });
        }
      }
    };

    setFunction = function(self, field) {
      return function(value, cb) {
        var hasValue;
        hasValue = true;
        if (!(value != null) || typeof value === 'function') {
          cb = value;
          hasValue = false;
        }
        if (hasValue) {
          return setField(self, field, value, cb);
        } else {
          return getField(self, field, cb);
        }
      };
    };

    BaseModel.prototype.extendObjs = function(obj1, obj2) {
      var key, obj3, val;
      obj3 = {};
      for (key in obj2) {
        val = obj2[key];
        obj3[key] = obj2[key];
      }
      for (key in obj1) {
        val = obj1[key];
        if (obj1[key] != null) {
          obj3[key] = obj1[key];
        }
      }
      return obj3;
    };

    return BaseModel;

  })();

}).call(this);
